-----------------------------------------------------------------------------------------------------------------------------------------
#### PUNTO INICIAL.
#### Creo una db llamada ecommerce.

mongosh use ecommerce

-----------------------------------------------------------------------------------------------------------------------------------------

#### PUNTO 1 Y 2.
#### Agregar 10 documentos con valores distintos a las colecciones mensajes y productos.
#### Definir las claves de los documentos en relación a los campos de las tablas de esa base. En el caso de los productos, 
     poner valores al campo precio entre los 100 y 5000 pesos(eligiendo valores intermedios, ej: 120, 580, 900, 1280, 1700, 
     2300, 2860, 3350, 4320, 4990). 

#### Agrego un primer documento de prueba.

db.products.insertMany([ { title: 'Producto Prueba 1', price: 200, thumbnail: 'sin-imagen', }, ]);


#### busco en la coleccion "products" los elementos agregados

db.getCollection('products').find()

#### Agrego los 9 doc restantes

db.products.insertMany([ 
    {
        "timestamp": 1650325366477,
        "name": "Cafe Cabrales",
        "description": "BOLSA DE CAFE MARCA CABRALES 150GR",
        "price": 295,
        "thumbnail": "https://statics.dinoonline.com.ar/imagenes/large_460x460/2030009_l.jpg",
        "code": "10200",
        "stock": "600"
    },
    {
        "timestamp": 1650325366477,
        "name": "9 DE ORO",
        "description": "GALLETITAS SALADAS MARCA 9 DE ORO",
        "price": 100,
        "thumbnail": "https://statics.dinoonline.com.ar/imagenes/large_460x460/2142156_l.jpg",
        "code": "7990",
        "stock": "3500"
    },
    {
        "timestamp": 1650325366477,
        "name": "NESCAFE",
        "description": "CAFE NESCAFE TRADICION DOY PACK",
        "price": 289,
        "thumbnail": "https://statics.dinoonline.com.ar/imagenes/large_460x460/2030519_l.jpg",
        "code": "1860",
        "stock": "200"
    },
    {
        "timestamp": 1650325366477,
        "name": "TOMAHAWK",
        "description": "TOMAHAWK CABAÑA BELTRAN ENVASADO AL VACIO X KG",
        "price": 1590,
        "thumbnail": "https://statics.dinoonline.com.ar/imagenes/full_600x600_ma/3400737_f.jpg",
        "code": "8596",
        "stock": "75"
    },
    {
        "timestamp": 1650325366477,
        "name": "VACIO",
        "description": "VACIO CABAÑA BELTRAN AL VACIO X KG.",
        "price": 1490,
        "thumbnail": "https://statics.dinoonline.com.ar/imagenes/full_600x600_ma/3400734_f.jpg",
        "code": "8595",
        "stock": "23"
    },
    {
        "timestamp": 1650325366477,
        "name": "MATAMBRE",
        "description": "MATAMBRE CABAÑA BELTRAN AL VACIO X KG.",
        "price": 1690,
        "thumbnail": "https://statics.dinoonline.com.ar/imagenes/full_600x600_ma/3400735_f.jpg",
        "code": "8593",
        "stock": "21"
    },
    {
        "timestamp": 1650325366477,
        "name": "ASPIRADORA GAMMA",
        "description": "ASPIRADORA MINI PARA HOGAR GAMMA",
        "price": 3200,
        "thumbnail": "https://http2.mlstatic.com/D_NQ_NP_2X_987902-MLA31462212758_072019-F.webp",
        "code": "9000",
        "stock": "21"
    },
    {
        "timestamp": 1650325366477,
        "name": "SAMSUNG J2",
        "description": "CELULAR SAMSUNG J2 PRIME. NEGRO. 4GB RAM",
        "price": 5000,
        "thumbnail": "https://http2.mlstatic.com/D_NQ_NP_2X_836006-MLA44774242935_022021-F.webp",
        "code": "789",
        "stock": "21"
    },
    {
        "timestamp": 1650325366477,
        "name": "MANGUERA DE JARDIN",
        "description": "MANGUERA DE JARDIN REFORZADA 25mts",
        "price": 2500,
        "thumbnail": "https://statics.dinoonline.com.ar/imagenes/large_460x460/3681172_l.jpg",
        "code": "94",
        "stock": "21"
    },
]);

#### Agrego los 10 doc la coleccion de mensajes.

db.messages.insertMany([
    { email: 'Email Prueba 1', message: 'Mensaje prueba 1', date: 1650325366477 },
    { email: 'Email Prueba 2', message: 'Mensaje prueba 2'  date: 1650325366477 },
    { email: 'Email Prueba 3', message: 'Mensaje prueba 3', date: 1650325366477 },
    { email: 'Email Prueba 4', message: 'Mensaje prueba 4', date: 1650325366477 },
    { email: 'Email Prueba 5', message: 'Mensaje prueba 5', date: 1650325366477 },
    { email: 'Email Prueba 6', message: 'Mensaje prueba 6', date: 1650325366477 },
    { email: 'Email Prueba 7', message: 'Mensaje prueba 7', date: 1650325366477 },
    { email: 'Email Prueba 8', message: 'Mensaje prueba 8', date: 1650325366477 },
    { email: 'Email Prueba 9', message: 'Mensaje prueba 9', date: 1650325366477 },
    { email: 'Email Prueba 10', message: 'Mensaje prueba 10', date: 1650325366477 }
]);

#### busco en la coleccion "message" los elementos agregados

db.getCollection('messages').find();

-----------------------------------------------------------------------------------------------------------------------------------------


#### PUNTO 3 y 4.
#### Listar todos los documentos en cada colección.
#### Mostrar la cantidad de documentos almacenados en cada una de ellas.

db.products.countDocuments();
db.messages.countDocuments();

-----------------------------------------------------------------------------------------------------------------------------------------

#### PUNTO 5.
#### a)  Agregar un producto más en la colección de productos 

db.products.insertOne(
    {
        "timestamp": 1650325366477,
        "name": "PRODUCTO AGREGADO",
        "description": "PRODUCTO AGREGADO PARA PUNTO 5 - A",
        "price": 2800,
        "thumbnail": "sin-imagen",
        "code": "00",
        "stock": "01"
    }
)


#### b)  Realizar una consulta por nombre de producto específico:
####    I)      Listar los productos con precio menor a 1000 pesos.
            
db.products.find({ price: { $lt: 1000}}) 

####    II)     Listar los productos con precio entre los 1000 a 3000 pesos.
db.products.find({ $and: [{price: { $gt: 1000 }}, { price: {$lt: 3000}} ]}) 

####    III)    Listar los productos con precio mayor a 3000 pesos.
db.products.find({ price: { $gt: 3000}})
       


#### c)  Hacer una actualización sobre todos los productos, agregando el campo stock a todos ellos con un valor de 100.

db.products.updateMany({},{ $set: {stock: 100}}) 


#### d)  Cambiar el stock a cero de los productos con precios mayores a 4000 pesos. 


db.products.updateMany({ price: { $gte: 4000 }},{ $set: {stock: 0}})


#### e)  Borrar los productos con precio menor a 1000 pesos 


db.products.deleteMany({ price: { $lt: 1000}})



-----------------------------------------------------------------------------------------------------------------------------------------

#### PUNTO 6.
#### Crear un usuario 'pepe' clave: 'asd456' que sólo pueda leer la base de datos ecommerce. Verificar que pepe no pueda cambiar la información.

use admin db.createUser({ user: "pepe", pwd: "asd456", roles: [{ role: "read", db: "ecommerce"}]})

Exit shell

mongosh -u pepe -p asd456 --authenticationDatabase admin db.products.find()
